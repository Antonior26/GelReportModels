{
  "protocol" : "ReportTriggering",
  "namespace" : "GelReportModes",
  "doc" : "Define the Report used by GEL to trigger the analysis process",
  "types" : [ {
    "type" : "record",
    "name" : "Position",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `Position` is an unoriented base in some already known sequence. A\n`Position` is represented by a sequence name or ID, and a base number on that\nsequence (0-based).",
    "fields" : [ {
      "name" : "sequenceId",
      "type" : [ "null", "string" ],
      "doc" : "The ID of the sequence on which the `Side` is located. This may be a\n  `Reference` sequence, or a novel piece of sequence associated with a\n  `VariantSet`.\n\n  We allow a null value for sequenceId to support the \"classic\" model.\n\n  If the server supports the \"graph\" mode, this must not be null.",
      "default" : null
    }, {
      "name" : "referenceName",
      "type" : [ "null", "string" ],
      "doc" : "The name of the reference sequence in whatever reference set is being used.\n  Does not generally include a \"chr\" prefix, so for example \"X\" would be used\n  for the X chromosome.\n\n  If `sequenceId` is null, this must not be null.",
      "default" : null
    }, {
      "name" : "position",
      "type" : "long",
      "doc" : "The 0-based offset from the start of the forward strand for that sequence.\n  Genomic positions are non-negative integers less than sequence length."
    } ]
  }, {
    "type" : "enum",
    "name" : "Strand",
    "namespace" : "org.ga4gh.models",
    "doc" : "Indicates the DNA strand associate for some data item.\n* `NEG_STRAND`: The negative (-) strand.\n* `POS_STRAND`:  The postive (+) strand.",
    "symbols" : [ "NEG_STRAND", "POS_STRAND" ]
  }, {
    "type" : "record",
    "name" : "Side",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `Side` is an oriented base in some already known sequence. A\n`Side` is represented by a sequence name or ID, a base number on that\nsequence (0-based), and a `Strand` to indicate the forward or reverse-complement\norientation.\n\nFor example, given the sequence \"GTGG\", the `Side` on that sequence at\noffset 1 in the forward orientation would be the left side of the T/A base pair.\nThe base at this `Side` is \"T\". Alternately, for offset 1 in the reverse\norientation, the `Side` would be the right side of the T/A base pair, and\nthe base at the `Side` is \"A\".\n\nOffsets added to a `Side` are interpreted as reading along its strand;\nadding to a reverse strand side actually subtracts from its `base.position`\nmember.\n\nThere is a total ordering on sides, assuming a total ordering on\n`Sequence`s. Sides are sorted by their `Sequence` (as specified by\n`sequenceId` and/or `referenceName`), then within a `Sequence` by their\n`position` offsets, and then finally by `Strand`, with `NEG_STRAND` first, then\n`POS_STRAND`.",
    "fields" : [ {
      "name" : "base",
      "type" : "Position",
      "doc" : "Base the `Side` is associated with."
    }, {
      "name" : "strand",
      "type" : "Strand",
      "doc" : "Strand the side is associated with. `POS_STRAND` represents the forward\n  strand, or equivalently the left side of a base, and `NEG_STRAND` represents\n  the reverse strand, or equivalently the right side of a base.\n\n  If you need a `Side` without a `Strand`, you need a `Position`."
    } ]
  }, {
    "type" : "record",
    "name" : "Join",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `Join` is simply a pair of `Side` objects. The are logically unordered (i.e.\nswapping makes no difference), but we require a rank on the Sequences, and so\nimplicitly on the sides, so to avoid ambiguity we require that the side\nfor side1 is less than that for side2.",
    "fields" : [ {
      "name" : "side1",
      "type" : "Side",
      "doc" : "The lower-valued `Side` that this `Join` is joining."
    }, {
      "name" : "side2",
      "type" : "Side",
      "doc" : "The higher-valued `Side`, which this `Join` attaches to the side specified\n  by side1."
    } ]
  }, {
    "type" : "record",
    "name" : "Sequence",
    "namespace" : "org.ga4gh.models",
    "doc" : "Represents a sequence in a sequence graph. May be joined onto parent\n`Sequence`(s) at the left and/or right endpoints, and may have other `Sequence`s\nas children.\n\nDoes not include any base data. The bases for a `Sequence` are available through\nthe `getSequenceBases()` API call.",
    "fields" : [ {
      "name" : "id",
      "type" : "string",
      "doc" : "The ID of the sequence."
    }, {
      "name" : "length",
      "type" : "long",
      "doc" : "The length of the sequence. Must be greater than 0."
    } ]
  }, {
    "type" : "record",
    "name" : "Segment",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `Segment` is a range on a `Sequence`. It does not include any base data. (The\nbases for a `Sequence` are available through the `getSequenceBases()` API call.)\n\nIn the sequence \"GTGG\", the `Segment` starting at index 1 on the forward strand\nwith length 2 is the \"TG\" on the forward strand. The length-2 `Segment` starting\nat index 1 on the reverse strand is \"AC\", corresponding to the first two base\npairs of the sequence, or the last two bases of the reverse complement.\n\nA `Segment` has a left and a right end, in its local orientation (i.e. taking\n`Segment.start.strand` to be the `Segment`'s forward strand).",
    "fields" : [ {
      "name" : "start",
      "type" : "Side",
      "doc" : "The sequence ID and start index of this `Segment`. This base is the first\n  included in the `Segment`, regardless of orientation."
    }, {
      "name" : "length",
      "type" : "long",
      "doc" : "The length of this `Segment`'s sequence. If `start` is on the forward strand,\n  the `Segment` contains the range [`start.base.position`,\n  `start.base.position` + `length`). If `start` is on the reverse strand, the\n  `Segment` contains the range (`start.base.position` - `length`,\n  `start.base.position`]. This is equivalent to starting from the side indicated\n  by `start`, and traversing through that base out to the specified length.\n\n  A `Segment` may have zero length (for example, when it is being used to\n  specify a `Path` consisting only of a `Join`."
    } ]
  }, {
    "type" : "record",
    "name" : "Path",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `Path` is an ordered list of `Segment`s. In general any contiguous path\nthrough a sequence graph, with no novel adjacencies, can be represented by a\n`Path`.",
    "fields" : [ {
      "name" : "segments",
      "type" : {
        "type" : "array",
        "items" : "Segment"
      },
      "doc" : "We require that each pair of consecutive `Segment`s in a `Path` be connected\n  by a `Join` from the right end of the first `Segment` to the left end of the\n  second. `Segment`s appear in the order in which they occur when walking the\n  path from one end to the other.\n\n  Note that the `Path` cannot follow two `Join`s in a row without traversing a\n  `Segment`.\n\n  Two adjacent `Segment`s that could be combined must be combined. Adjacent\n  `Segment`s should not be abutting on the same `Sequence`.\n\n  \"Sticky ends\", or `Path`s that start or end in a `Join`, are specified by\n  using a 0-length `Segment` at the start or end of the `Path`.",
      "default" : [ ]
    } ]
  }, {
    "type" : "record",
    "name" : "Region",
    "namespace" : "org.ga4gh.models",
    "doc" : "An abstraction for referring to a genomic region, in relation to some already \nknown reference. This will require some significant rework as we move to graph\ncoordinates.",
    "fields" : [ {
      "name" : "start",
      "type" : "Position",
      "doc" : "The starting point of the region. For the moment the base-pair included in\n  the region, on the 5' end of the oriented region."
    }, {
      "name" : "length",
      "type" : "long",
      "doc" : "The length, in base pairs"
    } ]
  }, {
    "type" : "record",
    "name" : "OntologyTerm",
    "namespace" : "org.ga4gh.models",
    "doc" : "An ontology term describing an attribute. (e.g. the phenotype attribute\n'polydactyly' from HPO)",
    "fields" : [ {
      "name" : "ontologySource",
      "type" : "string",
      "doc" : "The source of the onotology term.\n  (e.g. `Ontology for Biomedical Investigation`)"
    }, {
      "name" : "id",
      "type" : "string",
      "doc" : "The ID defined by the external onotology source.\n  (e.g. `http://purl.obolibrary.org/obo/OBI_0001271`)"
    }, {
      "name" : "name",
      "type" : [ "null", "string" ],
      "doc" : "The name of the onotology term. (e.g. `RNA-seq assay`)",
      "default" : null
    } ]
  }, {
    "type" : "record",
    "name" : "ExternalIdentifier",
    "namespace" : "org.ga4gh.models",
    "doc" : "Identifier from a public database",
    "fields" : [ {
      "name" : "database",
      "type" : "string",
      "doc" : "The source of the identifier.\n  (e.g. `Ensembl`)"
    }, {
      "name" : "identifier",
      "type" : "string",
      "doc" : "The ID defined by the external database.\n  (e.g. `ENST00000000000`)"
    }, {
      "name" : "version",
      "type" : "string",
      "doc" : "The version of the object or the database\n  (e.g. `78`)"
    } ]
  }, {
    "type" : "enum",
    "name" : "CigarOperation",
    "namespace" : "org.ga4gh.models",
    "doc" : "An enum for the different types of CIGAR alignment operations that exist.\nUsed wherever CIGAR alignments are used. The different enumerated values\nhave the following usage:\n\n* `ALIGNMENT_MATCH`: An alignment match indicates that a sequence can be\n  aligned to the reference without evidence of an INDEL. Unlike the\n  `SEQUENCE_MATCH` and `SEQUENCE_MISMATCH` operators, the `ALIGNMENT_MATCH`\n  operator does not indicate whether the reference and read sequences are an\n  exact match. This operator is equivalent to SAM's `M`.\n* `INSERT`: The insert operator indicates that the read contains evidence of\n  bases being inserted into the reference. This operator is equivalent to\n  SAM's `I`.\n* `DELETE`: The delete operator indicates that the read contains evidence of\n  bases being deleted from the reference. This operator is equivalent to\n  SAM's `D`.\n* `SKIP`: The skip operator indicates that this read skips a long segment of\n  the reference, but the bases have not been deleted. This operator is\n  commonly used when working with RNA-seq data, where reads may skip long\n  segments of the reference between exons. This operator is equivalent to\n  SAM's 'N'.\n* `CLIP_SOFT`: The soft clip operator indicates that bases at the start/end\n  of a read have not been considered during alignment. This may occur if the\n  majority of a read maps, except for low quality bases at the start/end of\n  a read. This operator is equivalent to SAM's 'S'. Bases that are soft clipped\n  will still be stored in the read.\n* `CLIP_HARD`: The hard clip operator indicates that bases at the start/end of\n  a read have been omitted from this alignment. This may occur if this linear\n  alignment is part of a chimeric alignment, or if the read has been trimmed\n  (e.g., during error correction, or to trim poly-A tails for RNA-seq). This\n  operator is equivalent to SAM's 'H'.\n* `PAD`: The pad operator indicates that there is padding in an alignment.\n  This operator is equivalent to SAM's 'P'.\n* `SEQUENCE_MATCH`: This operator indicates that this portion of the aligned\n  sequence exactly matches the reference (e.g., all bases are equal to the\n  reference bases). This operator is equivalent to SAM's '='.\n* `SEQUENCE_MISMATCH`: This operator indicates that this portion of the\n  aligned sequence is an alignment match to the reference, but a sequence\n  mismatch (e.g., the bases are not equal to the reference). This can\n  indicate a SNP or a read error. This operator is equivalent to SAM's 'X'.",
    "symbols" : [ "ALIGNMENT_MATCH", "INSERT", "DELETE", "SKIP", "CLIP_SOFT", "CLIP_HARD", "PAD", "SEQUENCE_MATCH", "SEQUENCE_MISMATCH" ]
  }, {
    "type" : "record",
    "name" : "CigarUnit",
    "namespace" : "org.ga4gh.models",
    "doc" : "A structure for an instance of a CIGAR operation.",
    "fields" : [ {
      "name" : "operation",
      "type" : "CigarOperation",
      "doc" : "The operation type."
    }, {
      "name" : "operationLength",
      "type" : "long",
      "doc" : "The number of bases that the operation runs for."
    }, {
      "name" : "referenceSequence",
      "type" : [ "null", "string" ],
      "doc" : "`referenceSequence` is only used at mismatches (`SEQUENCE_MISMATCH`)\n  and deletions (`DELETE`). Filling this field replaces the MD tag.\n  If the relevant information is not available, leave this field as `null`.",
      "default" : null
    } ]
  }, {
    "type" : "record",
    "name" : "VariantSetMetadata",
    "namespace" : "org.ga4gh.models",
    "doc" : "This metadata represents VCF header information.",
    "fields" : [ {
      "name" : "key",
      "type" : "string",
      "doc" : "The top-level key."
    }, {
      "name" : "value",
      "type" : "string",
      "doc" : "The value field for simple metadata."
    }, {
      "name" : "id",
      "type" : "string",
      "doc" : "User-provided ID field, not enforced by this API.\n  Two or more pieces of structured metadata with identical\n  id and key fields are considered equivalent."
    }, {
      "name" : "type",
      "type" : "string",
      "doc" : "The type of data."
    }, {
      "name" : "number",
      "type" : "string",
      "doc" : "The number of values that can be included in a field described by this\n  metadata."
    }, {
      "name" : "description",
      "type" : "string",
      "doc" : "A textual description of this metadata."
    }, {
      "name" : "info",
      "type" : {
        "type" : "map",
        "values" : {
          "type" : "array",
          "items" : "string"
        }
      },
      "doc" : "Remaining structured metadata key-value pairs.",
      "default" : {
      }
    } ]
  }, {
    "type" : "record",
    "name" : "VariantSet",
    "namespace" : "org.ga4gh.models",
    "doc" : "`Variant` and `CallSet` both belong to a `VariantSet`.\n`VariantSet` belongs to a `Dataset`.\nThe variant set is equivalent to a VCF file.\n\nA `VariantSet` can contain novel `Sequence`s, which are used to augment the\nsequence graph of its `ReferenceSet`, creating the augmented sequence graph\nagainst which `Allele`s are interpreted.",
    "fields" : [ {
      "name" : "id",
      "type" : "string",
      "doc" : "The variant set ID."
    }, {
      "name" : "datasetId",
      "type" : "string",
      "doc" : "The ID of the dataset this variant set belongs to."
    }, {
      "name" : "referenceSetId",
      "type" : "string",
      "doc" : "The reference set the variants in this variant set are using."
    }, {
      "name" : "metadata",
      "type" : {
        "type" : "array",
        "items" : "VariantSetMetadata"
      },
      "doc" : "The metadata associated with this variant set. This is equivalent to\n  the VCF header information not already presented in first class fields.",
      "default" : [ ]
    } ]
  }, {
    "type" : "record",
    "name" : "CallSet",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `CallSet` is a collection of variant calls for a particular sample.\nIt belongs to a `VariantSet`. This is equivalent to one column in VCF.",
    "fields" : [ {
      "name" : "id",
      "type" : "string",
      "doc" : "The call set ID."
    }, {
      "name" : "name",
      "type" : [ "null", "string" ],
      "doc" : "The call set name.",
      "default" : null
    }, {
      "name" : "sampleId",
      "type" : [ "null", "string" ],
      "doc" : "The sample this call set's data was generated from."
    }, {
      "name" : "variantSetIds",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "The IDs of the variant sets this call set has calls in.",
      "default" : [ ]
    }, {
      "name" : "created",
      "type" : [ "null", "long" ],
      "doc" : "The date this call set was created in milliseconds from the epoch.",
      "default" : null
    }, {
      "name" : "updated",
      "type" : [ "null", "long" ],
      "doc" : "The time at which this call set was last updated in\n  milliseconds from the epoch.",
      "default" : null
    }, {
      "name" : "info",
      "type" : {
        "type" : "map",
        "values" : {
          "type" : "array",
          "items" : "string"
        }
      },
      "doc" : "A map of additional call set information.",
      "default" : {
      }
    } ]
  }, {
    "type" : "record",
    "name" : "Call",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `Call` represents the determination of genotype with respect to a\nparticular `Variant`.\n\nIt may include associated information such as quality\nand phasing. For example, a call might assign a probability of 0.32 to\nthe occurrence of a SNP named rs1234 in a call set with the name NA12345.\n\nThe genotypes described by `Call`s must be consistent with any `AlleleCall`s in\nthe same `CallSet`. If a server supports \"classic\" mode, it must provide `Call`s\nfor all `Variant`s that have associated `AlleleCall`s in the `CallSet`.",
    "fields" : [ {
      "name" : "callSetId",
      "type" : [ "null", "string" ],
      "doc" : "The ID of the call set this variant call belongs to.\n  If this field is not present, the ordering of the call sets from a\n  `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match\n  the ordering of the calls on this `Variant`.\n  The number of results will also be the same."
    }, {
      "name" : "callSetName",
      "type" : [ "null", "string" ],
      "doc" : "The name of the call set this variant call belongs to.\n  If this field is not present, the ordering of the call sets from a\n  `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match\n  the ordering of the calls on this `Variant`.\n  The number of results will also be the same.",
      "default" : null
    }, {
      "name" : "variantId",
      "type" : [ "null", "string" ],
      "doc" : "The ID of the `Variant` that this `Call` belongs to. Must be set in any `Call`\n  that is not being returned from the server already contained within its\n  `Variant`."
    }, {
      "name" : "genotype",
      "type" : {
        "type" : "array",
        "items" : "int"
      },
      "doc" : "The genotype of this variant call.\n\n  A 0 value represents the reference allele of the associated `Variant`. Any\n  other value is a 1-based index into the alternate alleles of the associated\n  `Variant`.\n\n  If a variant had a referenceBases field of \"T\", an alternateBases\n  value of [\"A\", \"C\"], and the genotype was [2, 1], that would mean the call\n  represented the heterozygous value \"CA\" for this variant. If the genotype\n  was instead [0, 1] the represented value would be \"TA\". Ordering of the\n  genotype values is important if the phaseset field is present.",
      "default" : [ ]
    }, {
      "name" : "phaseset",
      "type" : [ "null", "string", {
        "type" : "array",
        "items" : "string"
      } ],
      "doc" : "If this field is a string, this variant call's genotype ordering implies\n  the phase of the bases and is consistent with any other variant calls on\n  the same contig which have the same phaseset string.\n\n  If this field is an array, each entry is associated with the corresponding\n  entry in the `genotype` array. Allele instances that are associated with the\n  same `phaseset` string occur on the same molecule of DNA.\n\n  For example, if one `Call` has `genotype` [0, 1], another is associated with\n  `Allele` 3, and both have a `phaseset` of [\"maternal\", \"paternal\"], then one\n  DNA molecule carries 0, 3 and another carries 1, 3.\n\n  If the API server supports the \"classic\" mode, this field must not be an\n  array. If the API server supports the \"graph\" mode and not the \"classic\" mode,\n  this field must be an array.",
      "default" : null
    }, {
      "name" : "genotypeLikelihood",
      "type" : {
        "type" : "array",
        "items" : "double"
      },
      "doc" : "The genotype likelihoods for this variant call. Each array entry\n  represents how likely a specific genotype is for this call as\n  log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The\n  value ordering is defined by the GL tag in the VCF spec.",
      "default" : [ ]
    }, {
      "name" : "info",
      "type" : {
        "type" : "map",
        "values" : {
          "type" : "array",
          "items" : "string"
        }
      },
      "doc" : "A map of additional variant call information.",
      "default" : {
      }
    } ]
  }, {
    "type" : "record",
    "name" : "AlleleCall",
    "namespace" : "org.ga4gh.models",
    "doc" : "An `AlleleCall` represents the determination of the copy number of a particular\n`Allele`, possibly within a certain `Variant`.\n\nIt may include associated information such as quality and phasing.\n\nThe `Allele` copy numbers described by an `AlleleCall` must be consistent with\nthose implied by the `genotype`s of any `Call`s in the same `CallSet`. If a\nserver supports \"graph\" mode, it must provide `Variant`-associated `AlleleCall`s\nfor any `Variant` with a `Call` in the `CallSet`.",
    "fields" : [ {
      "name" : "callSetId",
      "type" : "string",
      "doc" : "The ID of the call set this `AlleleCall` belongs to."
    }, {
      "name" : "alleleId",
      "type" : "string",
      "doc" : "The ID of the `Allele` that this `AlleleCall` is calling the copy number of."
    }, {
      "name" : "variantId",
      "type" : [ "null", "string" ],
      "doc" : "The ID of the `Variant` that this `AlleleCall` belongs to.\n\n  The specified `Variant` must have this `AlleleCall`'s `Allele` as an option.\n\n  Only one `AlleleCall` may be associated with a particular `Variant`-`Allele`\n  combination in a particular `CallSet`. So, one `AlleleCall` for this `Allele`\n  may have a null `variantId`, and one additional `AlleleCall` can use this\n  `Allele` for each `Variant` the `Allele` appears in."
    }, {
      "name" : "totalCopies",
      "type" : "double",
      "doc" : "Gives the called copy number of the `Allele`. If `variantId` is null, this\n  gives the total copy number of the `Allele`, including copies associated with\n  `Variant`s. Otherwise, it is the copy number of this `Allele` in the specified\n  `Variant`, and must agree with the `genotype` of the `Call` for that\n  `Variant`, if any."
    }, {
      "name" : "phaseset",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "Defines the phasing of the copies of this `Allele`. Each entry is associated\n  with an instance of this `AlleleCall`'s `Allele`. Allele instances that are\n  associated with the same `phaseset` string occur on the same molecule of DNA.\n\n  The number of entries should not exceed `totalCopies`."
    }, {
      "name" : "info",
      "type" : {
        "type" : "map",
        "values" : {
          "type" : "array",
          "items" : "string"
        }
      },
      "doc" : "A map of additional allele call information.",
      "default" : {
      }
    } ]
  }, {
    "type" : "record",
    "name" : "Variant",
    "namespace" : "org.ga4gh.models",
    "doc" : "A `Variant` represents a change in DNA sequence relative to some reference.\nFor example, a variant could represent a SNP or an insertion.\nVariants belong to a `VariantSet`.\nThis is equivalent to a row in VCF.",
    "fields" : [ {
      "name" : "id",
      "type" : "string",
      "doc" : "The variant ID."
    }, {
      "name" : "variantSetId",
      "type" : "string",
      "doc" : "The ID of the variant set this variant belongs to."
    }, {
      "name" : "names",
      "type" : {
        "type" : "array",
        "items" : "string"
      },
      "doc" : "Names for the variant, for example a RefSNP ID.",
      "default" : [ ]
    }, {
      "name" : "created",
      "type" : [ "null", "long" ],
      "doc" : "The date this variant was created in milliseconds from the epoch.",
      "default" : null
    }, {
      "name" : "updated",
      "type" : [ "null", "long" ],
      "doc" : "The time at which this variant was last updated in\n  milliseconds from the epoch.",
      "default" : null
    }, {
      "name" : "referenceName",
      "type" : [ "null", "string" ],
      "doc" : "The reference on which this variant occurs.\n  (e.g. `chr20` or `X`)\n\n  If the API server supports the \"classic\" mode, this field must not be null.",
      "default" : null
    }, {
      "name" : "start",
      "type" : [ "null", "long" ],
      "doc" : "The start position at which this variant occurs (0-based).\n  This corresponds to the first base of the string of reference bases.\n  Genomic positions are non-negative integers less than reference length.\n  Variants spanning the join of circular genomes are represented as\n  two variants one on each side of the join (position 0).\n\n  If the API server supports the \"classic\" mode, this field must not be null.",
      "default" : null
    }, {
      "name" : "end",
      "type" : [ "null", "long" ],
      "doc" : "The end position (exclusive), resulting in [start, end) closed-open interval.\n  This is typically calculated by `start + referenceBases.length`.\n\n  If the API server supports the \"classic\" mode, this field must not be null.",
      "default" : null
    }, {
      "name" : "referenceBases",
      "type" : [ "null", "string" ],
      "doc" : "The reference bases for this variant. They occupy the range described by\n  `referenceName`, `start`, and `end`, which all must be set if this field is\n  set.\n\n  If the API server supports the \"classic\" mode, this field must not be null.",
      "default" : null
    }, {
      "name" : "alternateBases",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ],
      "doc" : "The bases that appear instead of the reference bases. If this field is not\n  null, `referenceBases` must be set.\n\n  If the API server supports the \"classic\" mode, this field must not be null.",
      "default" : null
    }, {
      "name" : "alleleIds",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ],
      "doc" : "The IDs of the reference and alternate `Allele`s for this `Variant`. The first\n  is the reference allele, and any others are alternates. If this field is set\n  along with `referenceName`, `start`, `end`, `referenceBases`, and/or\n  `alternateBases`, those fields must agree with the `Allele`s given here.\n\n  If the API server supports the \"graph\" mode, this field must not be null."
    }, {
      "name" : "info",
      "type" : {
        "type" : "map",
        "values" : {
          "type" : "array",
          "items" : "string"
        }
      },
      "doc" : "A map of additional variant information.",
      "default" : {
      }
    }, {
      "name" : "calls",
      "type" : [ "null", {
        "type" : "array",
        "items" : "Call"
      } ],
      "doc" : "The variant calls for this particular variant. Each one represents the\n  determination of genotype with respect to this variant. `Call`s in this array\n  are implicitly associated with this `Variant`.\n\n  Calls are also available through the `searchCalls()` API method.\n\n  If the API server supports the \"classic\" mode, this field must not be null.",
      "default" : null
    } ]
  }, {
    "type" : "record",
    "name" : "Allele",
    "namespace" : "org.ga4gh.models",
    "doc" : "`Allele`s are the key component of the \"allelic\" model of variation: they are\nsingle objects that are present in some copy number.\n\nAn `Allele` is a contiguous piece of sequence that we will want to say is\npresent (in general at some copy number) or absent in a sample. Very often it\nwill just be a single `Segment` covering the entirety of a novel `Sequence`, but\nit is also common for it to be a mix of `Segment`s on reference and novel\n`Sequence`s, or in general to be any contiguous path through the augmented\nsequence graph.\n\n`Allele`s belong to `VariantSet`s. `Allele`s can also be used to represent the\nreference and alternate alleles of `Variant`s.\n\nNote that `Path`s cannot follow `Join`s not represented in the augmented\nsequence graph. For example, if  an `Allele` that spans a novel deletion is\nrequired, a new `Join` should exist to describe that deletion, available through\n`searchJoins()`.",
    "fields" : [ {
      "name" : "id",
      "type" : "string",
      "doc" : "The ID of this `Allele`. If this `Allele` is one `Segment` consisting of\n  the entirety of a `Sequence`, this is equal to the ID of that `Sequence`."
    }, {
      "name" : "variantSetId",
      "type" : "string",
      "doc" : "The ID of the variant set this allele belongs to."
    }, {
      "name" : "path",
      "type" : "Path",
      "doc" : "The ordered and oriented `Segment`s of DNA that this `Allele` represents.\n\n  `Segment`s on this `Path` are on either `Reference` `Sequence`s, or\n  `Sequence`s associated with this `VariantSet. Both types of `Sequence`s are\n  available through the `searchSequences()` and `getSequence()` API calls."
    } ]
  }, {
    "type" : "record",
    "name" : "File",
    "doc" : "This Define define a file (This should be represent by two different type of File)\nThis Record is define by the sampleID and a URI\nCurrently SampleID can be a single String or",
    "fields" : [ {
      "name" : "SampleId",
      "type" : [ "null", "string", {
        "type" : "array",
        "items" : "string"
      } ],
      "doc" : "Unique ID of the Sample"
    }, {
      "name" : "URIFile",
      "type" : "string",
      "doc" : "URI PATH (could be URL ????)"
    } ]
  }, {
    "type" : "record",
    "name" : "SampleRecord",
    "doc" : "This define a sample (demographics and pedigree information, this extends phenotips but is still compatible with it)",
    "fields" : [ {
      "name" : "id",
      "type" : "string"
    }, {
      "name" : "externalId",
      "type" : [ "null", "string" ]
    }, {
      "name" : "father",
      "type" : [ "null", "string" ]
    }, {
      "name" : "mother",
      "type" : [ "null", "string" ]
    }, {
      "name" : "sex",
      "type" : [ "null", "string" ]
    }, {
      "name" : "disorders",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ]
    }, {
      "name" : "hpoTerms",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ]
    }, {
      "name" : "carrierStatus",
      "type" : [ "null", "string" ]
    }, {
      "name" : "lifeStatus",
      "type" : [ "null", "string" ],
      "doc" : "This is not in GEL models"
    }, {
      "name" : "ancestries",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ],
      "doc" : "change to ethnicities or add both (see GEL model for level4)??"
    }, {
      "name" : "ageOfOnset",
      "type" : [ "null", "int" ],
      "doc" : "Age of onset (this is not in phenotips)"
    }, {
      "name" : "bandAge",
      "type" : [ "null", "string" ],
      "doc" : "Band Age (this is not in phenotips)"
    }, {
      "name" : "presumedConsanguinity",
      "type" : [ "null", "boolean" ],
      "doc" : "I would propose add PresumedConsanguinity here"
    }, {
      "name" : "additionalClinical",
      "type" : {
        "type" : "map",
        "values" : "string"
      },
      "doc" : "We could add a map here to store additional information"
    } ]
  }, {
    "type" : "record",
    "name" : "CancerSample",
    "fields" : [ {
      "name" : "sample",
      "type" : "SampleRecord"
    }, {
      "name" : "cancerType",
      "type" : "string",
      "doc" : "i.e, Ovarian, Colorectal, etc"
    }, {
      "name" : "tumorStatus",
      "type" : [ "null", "string" ],
      "doc" : "i.e, Primary, metastasis, secondary, etc"
    }, {
      "name" : "tumorSampleOrigin",
      "type" : [ "null", "string" ],
      "doc" : "i.e, Blood, FFPE, FF, resection, biopsy, etc"
    }, {
      "name" : "treatment",
      "type" : [ "null", "string" ],
      "doc" : "i.e, Naive, chemo, radiation"
    }, {
      "name" : "treatmentType",
      "type" : [ "null", "string" ],
      "doc" : "What kind of chemo, or of radiation"
    }, {
      "name" : "tumorStage",
      "type" : [ "null", "string" ]
    }, {
      "name" : "priorTesting",
      "type" : [ "null", "string" ],
      "doc" : "??"
    }, {
      "name" : "cellularity",
      "type" : [ "null", "float" ],
      "doc" : "Expressed as percentage???"
    } ]
  }, {
    "type" : "record",
    "name" : "GermLineSample",
    "fields" : [ {
      "name" : "sample",
      "type" : "SampleRecord"
    }, {
      "name" : "sampleOrigin",
      "type" : [ "null", "string" ],
      "doc" : "i.e, Saliva, Blood, Tumour or other"
    } ]
  }, {
    "type" : "record",
    "name" : "VirtualPanel",
    "fields" : [ {
      "name" : "level4Title",
      "type" : "string"
    }, {
      "name" : "geneId",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ],
      "doc" : "gene id from ensembl (which version - as per annotation file)"
    }, {
      "name" : "clinicalRelevantTranscript",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ]
    }, {
      "name" : "RelevantRegions",
      "type" : [ "null", "File" ]
    }, {
      "name" : "variant",
      "type" : [ "null", {
        "type" : "array",
        "items" : "string"
      } ],
      "doc" : "GA4GH format, sources: clinvar, HGMD, COSMIC, GWASCatalog??? Should we use VCF files and not make this more complex????"
    } ]
  }, {
    "type" : "record",
    "name" : "RareDisease",
    "fields" : [ {
      "name" : "level4Title",
      "type" : "string"
    }, {
      "name" : "Pedigree",
      "type" : {
        "type" : "array",
        "items" : "SampleRecord"
      }
    }, {
      "name" : "inbreedingCoefficientEstimates",
      "type" : [ "null", "File" ],
      "doc" : "Ask Katherine maybe worth create a model for this (I have a thought...)"
    }, {
      "name" : "complexGeneticPhenomenaDescription",
      "type" : "string",
      "doc" : "Proposed values:\n    MOSAICISM,\n    MONOSOMY,\n    DISOMY,\n    UNIPARENTAL_DISOMY,\n    TRISOMY,\n    OTHER_ANEUPLOIDY"
    }, {
      "name" : "modeOfInheritanceDescription",
      "type" : "string",
      "doc" : "Proposed values:\n    MONOALLELIC, AUTOSOMAL OR PSEUDOAUTOSOMAL, NOT IMPRINTED\n    MONOALLELIC, AUTOSOMAL OR PSEUDOAUTOSOMAL, MATERNALLY IMPRINTED (PATERNAL ALLELE EXPRESSED)\n    MONOALLELIC, AUTOSOMAL OR PSEUDOAUTOSOMAL, PATERNALLY IMPRINTED (MATERNAL ALLELE EXPRESSED)\n    MONOALLELIC, AUTOSOMAL OR PSEUDOAUTOSOMAL, IMPRINTED STATUS UNKNOWN\n    BIALLELIC, AUTOSOMAL OR PSEUDOAUTOSOMAL\n    BOTH MONOALLELIC AND BIALLELIC, AUTOSOMAL OR PSEUDOAUTOSOMAL\n    BOTH MONOALLELIC AND BIALLELIC (BUT BIALLELIC MUTATIONS CAUSE A MORE SEVERE DISEASE FORM), AUTOSOMAL OR PSEUDOAUTOSOMAL\n    X-LINKED: HEMIZYGOUS MUTATION IN MALES, BIALLELIC MUTATIONS IN FEMALES\n    X-LINKED: HEMIZYGOUS MUTATION IN MALES, MAY BE CAUSED BY MONOALLELIC MUTATIONS IN FEMALES\n    MITOCHONDRIAL\n    UNKNOWN"
    } ]
  }, {
    "type" : "record",
    "name" : "Cancer",
    "fields" : [ {
      "name" : "primaryCancer",
      "type" : "string"
    }, {
      "name" : "cancerSampleList",
      "type" : {
        "type" : "array",
        "items" : "CancerSample"
      }
    }, {
      "name" : "germLineSampleList",
      "type" : {
        "type" : "array",
        "items" : "GermLineSample"
      }
    } ]
  }, {
    "type" : "record",
    "name" : "Report",
    "doc" : "This record represents basic information for this report",
    "fields" : [ {
      "name" : "id",
      "type" : "string",
      "doc" : "Unique id for this report"
    }, {
      "name" : "reportVersion",
      "type" : "int",
      "doc" : "Version of this report"
    }, {
      "name" : "consentStatus",
      "type" : "string",
      "doc" : "Consent status for the whole family (should be this enum, array, map?)"
    }, {
      "name" : "BAMs",
      "type" : {
        "type" : "array",
        "items" : "File"
      },
      "doc" : "BAMs Files"
    }, {
      "name" : "gVCFs",
      "type" : {
        "type" : "array",
        "items" : "File"
      },
      "doc" : "gVCFs Files where SNVs and INDELs are represented"
    }, {
      "name" : "VCFs",
      "type" : {
        "type" : "array",
        "items" : "File"
      },
      "doc" : "VCFs Files where SVs and CNVs are represented"
    }, {
      "name" : "BigWigs",
      "type" : {
        "type" : "array",
        "items" : "File"
      },
      "doc" : "BigWigs Files"
    }, {
      "name" : "annotationFile",
      "type" : "File",
      "doc" : "Annotation File, is important define the format of this annotation file, we have several options to do it. The way of obtain the file should be also discussed."
    }, {
      "name" : "virtualPanel",
      "type" : [ "null", "VirtualPanel" ],
      "doc" : "This has benn remove from here and move to rareDisease or cancer\n    array<Demographic> demographics;"
    }, {
      "name" : "rareDisease",
      "type" : [ "null", "RareDisease" ]
    }, {
      "name" : "cancer",
      "type" : [ "null", "Cancer" ]
    }, {
      "name" : "familyHistory",
      "type" : [ "null", "File" ]
    }, {
      "name" : "resultReportURI",
      "type" : "string"
    }, {
      "name" : "resultReportVersion",
      "type" : "string"
    }, {
      "name" : "additionalInfo",
      "type" : {
        "type" : "map",
        "values" : "string"
      },
      "doc" : "Additional information"
    } ]
  } ],
  "messages" : {
  }
}