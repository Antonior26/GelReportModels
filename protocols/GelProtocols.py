"""
DO NOT EDIT THIS FILE!!
This file is automatically generated by the process_schemas.py program
in the scripts directory. It is not intended to be edited directly. If
you need to update the GEL protocol classes, please run the script
on the appropriate schema version.
"""
from protocols.protocol import ProtocolElement
from protocols.protocol import SearchRequest
from protocols.protocol import SearchResponse

import avro.schema

version = '0.2.0'


class AdoptedStatus(object):
    """
    Default is not_adopted adoptedin means adopted into the family
    adoptedout means child belonged to the family and was adopted out
    """
    not_adopted = "not_adopted"
    adoptedin = "adoptedin"
    adoptedout = "adoptedout"


class CalledGenotype(ProtocolElement):
    """
    This is intended to hold the genotypes for the family members In
    principle it is a phased zygosity as in VCF spec and called by the
    analysis provider if further phasing is conducted
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"CalledGenotype", "fields": [{"doc": "", "type": "string", "name":
"participantId"}, {"doc": "", "type": "string", "name": "genotype"},
{"doc": "", "type": ["null", "int"], "name": "copyNumber"}], "doc":
""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "copyNumber",
        "genotype",
        "participantId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'copyNumber', 'genotype', 'participantId'
    ]

    def __init__(self, **kwargs):
        self.copyNumber = kwargs.get(
            'copyNumber', None)
        self.genotype = kwargs.get(
            'genotype', None)
        self.participantId = kwargs.get(
            'participantId', None)


class CancerDemographics(ProtocolElement):
    """
    This defines a Cancer Demographics
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"CancerDemographics", "fields": [{"type": "string", "name": "id"},
{"type": ["null", {"items": "string", "type": "array"}], "name":
"externalIds"}, {"type": ["null", "string"], "name":
"originatingCenter"}, {"type": ["null", "string"], "name":
"gelPhase"}, {"type": ["null", "string"], "name": "centerPatientId"},
{"doc": "", "type": "string", "name": "dataModelVersion"}, {"doc": "",
"type": ["null", "string"], "name": "primaryDiagnosis"}, {"doc": "",
"type": {"symbols": ["male", "female", "unknown"], "doc": "", "type":
"enum", "name": "Sex"}, "name": "sex"}, {"type": {"fields":
[{"default": false, "doc": "", "type": "boolean", "name":
"programmeConset"}, {"default": false, "doc": "", "type": "boolean",
"name": "primaryFindingConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "secondaryFindingConsent"}, {"default":
false, "doc": "", "type": "boolean", "name": "carrierStatusConsent"}],
"type": "record", "name": "ConsentStatus"}, "name": "consentStatus"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "additionalInformation"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "additionalInformation",
        "centerPatientId",
        "consentStatus",
        "dataModelVersion",
        "externalIds",
        "gelPhase",
        "id",
        "originatingCenter",
        "primaryDiagnosis",
        "sex",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'additionalInformation', 'centerPatientId', 'consentStatus',
        'dataModelVersion', 'externalIds', 'gelPhase', 'id',
        'originatingCenter', 'primaryDiagnosis', 'sex'
    ]

    def __init__(self, **kwargs):
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.centerPatientId = kwargs.get(
            'centerPatientId', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.dataModelVersion = kwargs.get(
            'dataModelVersion', None)
        self.externalIds = kwargs.get(
            'externalIds', None)
        self.gelPhase = kwargs.get(
            'gelPhase', None)
        self.id = kwargs.get(
            'id', None)
        self.originatingCenter = kwargs.get(
            'originatingCenter', None)
        self.primaryDiagnosis = kwargs.get(
            'primaryDiagnosis', None)
        self.sex = kwargs.get(
            'sex', None)


class CancerParticipant(ProtocolElement):
    """
    This defines a Cancer Participant (demographics and sample
    information)
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"CancerParticipant", "fields": [{"type": {"doc": "", "type": "record",
"name": "CancerDemographics", "fields": [{"type": "string", "name":
"id"}, {"type": ["null", {"items": "string", "type": "array"}],
"name": "externalIds"}, {"type": ["null", "string"], "name":
"originatingCenter"}, {"type": ["null", "string"], "name":
"gelPhase"}, {"type": ["null", "string"], "name": "centerPatientId"},
{"doc": "", "type": "string", "name": "dataModelVersion"}, {"doc": "",
"type": ["null", "string"], "name": "primaryDiagnosis"}, {"doc": "",
"type": {"symbols": ["male", "female", "unknown"], "doc": "", "type":
"enum", "name": "Sex"}, "name": "sex"}, {"type": {"fields":
[{"default": false, "doc": "", "type": "boolean", "name":
"programmeConset"}, {"default": false, "doc": "", "type": "boolean",
"name": "primaryFindingConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "secondaryFindingConsent"}, {"default":
false, "doc": "", "type": "boolean", "name": "carrierStatusConsent"}],
"type": "record", "name": "ConsentStatus"}, "name": "consentStatus"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "additionalInformation"}]}, "name": "demographics"}, {"doc":
"", "type": "Sex", "name": "sex"}, {"doc": "", "type": {"items":
{"doc": "", "type": "record", "name": "CancerSample", "fields":
[{"doc": "", "type": "string", "name": "id"}, {"type": ["null",
"string"], "name": "centerSampleId"}, {"doc": "", "type": {"symbols":
["germline", "tumor"], "type": "enum", "name": "SampleType"}, "name":
"sampleType"}, {"doc": "", "type": ["null", "string"], "name":
"source"}, {"doc": "", "type": ["null", {"symbols": ["FFPE", "FF",
"unknown", "LEUK", "GL"], "doc": "", "type": "enum", "name":
"PreservationMethod"}], "name": "preservationMethod"}, {"doc": "",
"type": ["null", {"symbols": ["primary", "metastasis"], "doc": "",
"type": "enum", "name": "Phase"}], "name": "phase"}, {"doc": "",
"type": ["null", {"symbols": ["resection", "biopsy"], "type": "enum",
"name": "Method"}], "name": "method"}, {"doc": "", "type": ["null",
"double"], "name": "cellularity"}, {"doc": "", "type": ["null",
"double"], "name": "tumorContent"}]}, "type": "array"}, "name":
"cancerSamples"}, {"doc": "", "type": {"items": {"doc": "", "type":
"record", "name": "MatchedSamples", "fields": [{"type": "string",
"name": "germlineSampleId"}, {"type": "string", "name":
"tumorSampleId"}]}, "type": "array"}, "name": "matchedSamples"}],
"doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "cancerSamples",
        "demographics",
        "matchedSamples",
        "sex",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cancerSamples': CancerSample,
            'demographics': CancerDemographics,
            'matchedSamples': MatchedSamples,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'cancerSamples': CancerSample,
            'demographics': CancerDemographics,
            'matchedSamples': MatchedSamples,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'cancerSamples', 'demographics', 'matchedSamples', 'sex'
    ]

    def __init__(self, **kwargs):
        self.cancerSamples = kwargs.get(
            'cancerSamples', None)
        self.demographics = kwargs.get(
            'demographics', None)
        self.matchedSamples = kwargs.get(
            'matchedSamples', None)
        self.sex = kwargs.get(
            'sex', None)


class CancerSample(ProtocolElement):
    """
    stage in some cases it might be nice to know about the grade and
    stage of tumor, but this is not strictly required
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"CancerSample", "fields": [{"doc": "", "type": "string", "name":
"id"}, {"type": ["null", "string"], "name": "centerSampleId"}, {"doc":
"", "type": {"symbols": ["germline", "tumor"], "type": "enum", "name":
"SampleType"}, "name": "sampleType"}, {"doc": "", "type": ["null",
"string"], "name": "source"}, {"doc": "", "type": ["null", {"symbols":
["FFPE", "FF", "unknown", "LEUK", "GL"], "doc": "", "type": "enum",
"name": "PreservationMethod"}], "name": "preservationMethod"}, {"doc":
"", "type": ["null", {"symbols": ["primary", "metastasis"], "doc": "",
"type": "enum", "name": "Phase"}], "name": "phase"}, {"doc": "",
"type": ["null", {"symbols": ["resection", "biopsy"], "type": "enum",
"name": "Method"}], "name": "method"}, {"doc": "", "type": ["null",
"double"], "name": "cellularity"}, {"doc": "", "type": ["null",
"double"], "name": "tumorContent"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "cellularity",
        "centerSampleId",
        "id",
        "method",
        "phase",
        "preservationMethod",
        "sampleType",
        "source",
        "tumorContent",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'cellularity', 'centerSampleId', 'id', 'method', 'phase',
        'preservationMethod', 'sampleType', 'source', 'tumorContent'
    ]

    def __init__(self, **kwargs):
        self.cellularity = kwargs.get(
            'cellularity', None)
        self.centerSampleId = kwargs.get(
            'centerSampleId', None)
        self.id = kwargs.get(
            'id', None)
        self.method = kwargs.get(
            'method', None)
        self.phase = kwargs.get(
            'phase', None)
        self.preservationMethod = kwargs.get(
            'preservationMethod', None)
        self.sampleType = kwargs.get(
            'sampleType', None)
        self.source = kwargs.get(
            'source', None)
        self.tumorContent = kwargs.get(
            'tumorContent', None)


class CarrierStatus(object):
    """
    Definitions of enumeration used in RDParticipant
    """
    unaffected = "unaffected"
    affected = "affected"
    carrier = "carrier"
    uncertain = "uncertain"
    presymptomatic = "presymptomatic"


class ConsentStatus(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"ConsentStatus", "fields": [{"default": false, "doc": "", "type":
"boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default":
false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "carrierStatusConsent"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {}

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'carrierStatusConsent', 'primaryFindingConsent',
        'programmeConsent', 'secondaryFindingConsent'
    ]

    def __init__(self, **kwargs):
        self.carrierStatusConsent = kwargs.get(
            'carrierStatusConsent', False)
        self.primaryFindingConsent = kwargs.get(
            'primaryFindingConsent', False)
        self.programmeConsent = kwargs.get(
            'programmeConsent', False)
        self.secondaryFindingConsent = kwargs.get(
            'secondaryFindingConsent', False)


class Disorder(ProtocolElement):
    """
    This is quite GEL specific More generally one would like to have
    an omim or orphanet id here Currently all specific disease titles
    are asigned to a disease subgroup so really only specificDisease
    needs to be completed but we add the others for generality
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"Disorder", "fields": [{"doc": "", "type": ["null", "string"], "name":
"diseaseGroup"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubGroup"}, {"doc": "", "type": ["null", "string"], "name":
"specificDisease"}, {"doc": "", "type": ["null", "int"], "name":
"ageOfOnset"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "diseaseGroup",
        "diseaseSubGroup",
        "specificDisease",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'diseaseGroup', 'diseaseSubGroup',
        'specificDisease'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.diseaseGroup = kwargs.get(
            'diseaseGroup', None)
        self.diseaseSubGroup = kwargs.get(
            'diseaseSubGroup', None)
        self.specificDisease = kwargs.get(
            'specificDisease', None)


class File(ProtocolElement):
    """
    This defines a file This Record is defined by the sampleID and a
    URI Currently SampleID can be a single String or an array of
    strings if multiple samples are assoicated with the same file
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"File", "fields": [{"doc": "", "type": ["null", "string", {"items":
"string", "type": "array"}], "name": "SampleId"}, {"doc": "", "type":
"string", "name": "URIFile"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "SampleId",
        "URIFile",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'SampleId', 'URIFile'
    ]

    def __init__(self, **kwargs):
        self.SampleId = kwargs.get(
            'SampleId', None)
        self.URIFile = kwargs.get(
            'URIFile', None)


class HpoTerm(ProtocolElement):
    """
    This defines an HPO term and its modifiers (possibly multiple)
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"HpoTerm", "fields": [{"doc": "", "type": "string", "name": "term"},
{"doc": "", "type": ["null", "boolean"], "name": "termPresence"},
{"doc": "", "type": ["null", {"items": "string", "type": "array"}],
"name": "modifier"}, {"doc": "", "type": ["null", "int"], "name":
"ageOfOnset"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "ageOfOnset",
        "modifier",
        "term",
        "termPresence",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'ageOfOnset', 'modifier', 'term', 'termPresence'
    ]

    def __init__(self, **kwargs):
        self.ageOfOnset = kwargs.get(
            'ageOfOnset', None)
        self.modifier = kwargs.get(
            'modifier', None)
        self.term = kwargs.get(
            'term', None)
        self.termPresence = kwargs.get(
            'termPresence', None)


class InterpretationAnalysis(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"InterpretationAnalysis", "fields": [{"doc": "", "type": "string",
"name": "reportRequestId"}, {"doc": "", "type": "string", "name":
"analysisId"}, {"type": "string", "name": "companyName"}, {"type":
"string", "name": "reportURI"}, {"type": {"items": {"fields": [{"doc":
"", "type": "string", "name": "chromosome"}, {"doc": "", "type":
"int", "name": "position"}, {"doc": "", "type": "string", "name":
"reference"}, {"doc": "", "type": "string", "name": "alternate"},
{"doc": "", "type": ["null", {"items": {"doc": "", "type": "record",
"name": "CalledGenotype", "fields": [{"doc": "", "type": "string",
"name": "participantId"}, {"doc": "", "type": "string", "name":
"genotype"}, {"doc": "", "type": ["null", "int"], "name":
"copyNumber"}]}, "type": "array"}], "name": "familyGenotypes"},
{"doc": "", "type": {"items": {"fields": [{"doc": "", "type":
"string", "name": "modeOfInheritance"}, {"doc": "", "type":
{"symbols": ["complete", "incomplete"], "doc": "", "type": "enum",
"name": "Penetrance"}, "name": "penetrance"}, {"doc": "", "type":
"float", "name": "score"}, {"doc": "", "type": "boolean", "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"],
"name": "groupOfVariants"}, {"doc": "", "type": "string", "name":
"variantJustification"}, {"type": ["null", {"symbols": ["NONE",
"TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name":
"Tier"}], "name": "tier"}], "type": "record", "name": "ReportEvent"},
"type": "array"}, "name": "ReportEvents"}, {"doc": "", "type":
["null", "float"], "name": "internalScore"}, {"type": ["null",
{"symbols": ["BENIGN", "LIKELY_BENIGN", "VUS", "LIKELY_PATHOGENIC",
"PATHOGENIC"], "doc": "", "type": "enum", "name":
"VariantClassification"}], "name": "variantClassification"}, {"doc":
"", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}], "type":
"record", "name": "ReportedVariant"}, "type": "array"}, "name":
"reportedVariants"}, {"type": {"items": {"fields": [{"doc": "",
"type": "string", "name": "chromosome"}, {"doc": "", "type": "int",
"name": "start"}, {"doc": "", "type": "int", "name": "end"}, {"doc":
"", "type": "string", "name": "type"}, {"doc": "", "type": "string",
"name": "alternate"}, {"type": ["null", {"items": "CalledGenotype",
"type": "array"}], "name": "familyGenotypes"}, {"doc": "", "type":
{"items": "ReportEvent", "type": "array"}, "name": "ReportEvents"},
{"doc": "", "type": ["null", "float"], "name": "internalScore"},
{"type": ["null", "VariantClassification"], "name":
"variantClassification"}, {"doc": "", "type": ["null", {"values":
"string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}], "type":
"record", "name": "ReportedStructuralVariant"}, "type": "array"},
"name": "reportedStructuralVariant"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "analysisId",
        "comments",
        "companyName",
        "reportRequestId",
        "reportURI",
        "reportedStructuralVariant",
        "reportedVariants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariant': ReportedStructuralVariant,
            'reportedVariants': ReportedVariant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'reportedStructuralVariant': ReportedStructuralVariant,
            'reportedVariants': ReportedVariant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'analysisId', 'comments', 'companyName', 'reportRequestId',
        'reportURI', 'reportedStructuralVariant', 'reportedVariants'
    ]

    def __init__(self, **kwargs):
        self.analysisId = kwargs.get(
            'analysisId', None)
        self.comments = kwargs.get(
            'comments', None)
        self.companyName = kwargs.get(
            'companyName', None)
        self.reportRequestId = kwargs.get(
            'reportRequestId', None)
        self.reportURI = kwargs.get(
            'reportURI', None)
        self.reportedStructuralVariant = kwargs.get(
            'reportedStructuralVariant', None)
        self.reportedVariants = kwargs.get(
            'reportedVariants', None)


class InterpretationRequest(ProtocolElement):
    """
    This record represents basic information for this report
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"InterpretationRequest", "fields": [{"doc": "", "type": "string",
"name": "reportRequestId"}, {"doc": "", "type": "int", "name":
"reportVersion"}, {"default": false, "doc": "", "type": "boolean",
"name": "interpretGenome"}, {"doc": "", "type": {"items": {"doc": "",
"type": "record", "name": "File", "fields": [{"doc": "", "type":
["null", "string", {"items": "string", "type": "array"}], "name":
"SampleId"}, {"doc": "", "type": "string", "name": "URIFile"}]},
"type": "array"}, "name": "BAMs"}, {"doc": "", "type": {"items":
"File", "type": "array"}, "name": "gVCFs"}, {"doc": "", "type":
{"items": "File", "type": "array"}, "name": "VCFs"}, {"doc": "",
"type": {"items": "File", "type": "array"}, "name": "BigWigs"},
{"doc": "", "type": "File", "name": "annotationFile"}, {"type":
{"fields": [{"doc": "", "type": "string", "name":
"enrolledAgainstSpecificDiseaseTitle"}, {"doc": "", "type": "string",
"name": "dataModelCatalogueVersion"}, {"type": {"doc": "", "type":
"record", "name": "Pedigree", "fields": [{"doc": "", "type": "string",
"name": "familyId"}, {"type": {"items": {"doc": "", "type": "record",
"name": "RDParticipant", "fields": [{"type": "string", "name": "id"},
{"type": ["null", "int", "string"], "name": "FamilyId"}, {"type":
["null", {"items": "string", "type": "array"}], "name":
"externalIds"}, {"doc": "", "type": "string", "name":
"dataModelCatalogueVersion"}, {"doc": "", "type": {"symbols": ["male",
"female", "unknown"], "type": "enum", "name": "Sex"}, "name": "sex"},
{"doc": "", "type": "string", "name": "father"}, {"type": "string",
"name": "mother"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "Disorder", "fields": [{"doc": "", "type":
["null", "string"], "name": "diseaseGroup"}, {"doc": "", "type":
["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type":
["null", "string"], "name": "specificDisease"}, {"doc": "", "type":
["null", "int"], "name": "ageOfOnset"}]}, "type": "array"}], "name":
"disorderList"}, {"type": ["null", {"items": {"doc": "", "type":
"record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string",
"name": "term"}, {"doc": "", "type": ["null", "boolean"], "name":
"termPresence"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "modifier"}, {"doc": "", "type": ["null",
"int"], "name": "ageOfOnset"}]}, "type": "array"}], "name":
"hpoTermList"}, {"doc": "", "type": ["null", {"symbols":
["unaffected", "affected", "carrier", "uncertain", "presymptomatic"],
"doc": "", "type": "enum", "name": "CarrierStatus"}], "name":
"carrierStatus"}, {"doc": "", "type": ["null", {"symbols": ["aborted",
"deceased", "unborn", "stillborn", "miscarriage"], "type": "enum",
"name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null",
"boolean"], "name": "monozygotic"}, {"type": ["null", {"symbols":
["not_adopted", "adoptedin", "adoptedout"], "doc": "", "type": "enum",
"name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "",
"type": ["null", "boolean"], "name": "consanguineousParents"}, {"doc":
"", "type": {"fields": [{"default": false, "doc": "", "type":
"boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default":
false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "carrierStatusConsent"}], "type": "record", "name":
"ConsentStatus"}, "name": "consentStatus"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name":
"additionalInformation"}]}, "type": "array"}, "name":
"participants"}]}, "name": "pedigree"}, {"doc": "", "type": ["null",
"File"], "name": "inbreedingCoefficientEstimates"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name":
"ancestries"}, {"doc": "", "type": ["null", "string"], "name":
"complexGeneticPhenomena"}, {"doc": "", "type": {"items": "string",
"type": "array"}, "name": "modeOfInheritance"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "VirtualPanel",
"fields": [{"type": "string", "name": "SpecificDiseaseTitle"}, {"doc":
"", "type": ["null", {"items": "string", "type": "array"}], "name":
"geneIds"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "clinicalRelevantTranscripts"}, {"doc": "", "type":
["null", "File"], "name": "RelevantRegions"}, {"doc": "", "type":
["null", "File"], "name": "clinicalRelevantVariants"}]}], "name":
"virtualPanel"}, {"doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "OtherFamilyHistory", "fields": [{"type": ["null",
{"items": "string", "type": "array"}], "name":
"maternalFamilyHistory"}, {"type": ["null", {"items": "string",
"type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}], "type": "record", "name": "RareDisease"},
"name": "rareDisease"}, {"type": "string", "name": "analysisURI"},
{"type": "string", "name": "analysisVersion"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name":
"additionalInfo"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "BAMs",
        "BigWigs",
        "VCFs",
        "additionalInfo",
        "analysisURI",
        "analysisVersion",
        "annotationFile",
        "gVCFs",
        "rareDisease",
        "reportRequestId",
        "reportVersion",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'BAMs': File,
            'BigWigs': File,
            'VCFs': File,
            'annotationFile': File,
            'gVCFs': File,
            'rareDisease': RareDisease,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'BAMs': File,
            'BigWigs': File,
            'VCFs': File,
            'annotationFile': File,
            'gVCFs': File,
            'rareDisease': RareDisease,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'BAMs', 'BigWigs', 'VCFs', 'additionalInfo', 'analysisURI',
        'analysisVersion', 'annotationFile', 'gVCFs',
        'interpretGenome', 'rareDisease', 'reportRequestId',
        'reportVersion'
    ]

    def __init__(self, **kwargs):
        self.BAMs = kwargs.get(
            'BAMs', None)
        self.BigWigs = kwargs.get(
            'BigWigs', None)
        self.VCFs = kwargs.get(
            'VCFs', None)
        self.additionalInfo = kwargs.get(
            'additionalInfo', None)
        self.analysisURI = kwargs.get(
            'analysisURI', None)
        self.analysisVersion = kwargs.get(
            'analysisVersion', None)
        self.annotationFile = kwargs.get(
            'annotationFile', None)
        self.gVCFs = kwargs.get(
            'gVCFs', None)
        self.interpretGenome = kwargs.get(
            'interpretGenome', False)
        self.rareDisease = kwargs.get(
            'rareDisease', None)
        self.reportRequestId = kwargs.get(
            'reportRequestId', None)
        self.reportVersion = kwargs.get(
            'reportVersion', None)


class LifeStatus(object):
    """
    No documentation
    """
    aborted = "aborted"
    deceased = "deceased"
    unborn = "unborn"
    stillborn = "stillborn"
    miscarriage = "miscarriage"


class MatchedSamples(ProtocolElement):
    """
    This define a pair of germline and tumor, this pair should/must be
    analyzed together
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"MatchedSamples", "fields": [{"type": "string", "name":
"germlineSampleId"}, {"type": "string", "name": "tumorSampleId"}],
"doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "germlineSampleId",
        "tumorSampleId",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'germlineSampleId', 'tumorSampleId'
    ]

    def __init__(self, **kwargs):
        self.germlineSampleId = kwargs.get(
            'germlineSampleId', None)
        self.tumorSampleId = kwargs.get(
            'tumorSampleId', None)


class Method(object):
    """
    No documentation
    """
    resection = "resection"
    biopsy = "biopsy"


class OtherFamilyHistory(ProtocolElement):
    """
    Family history for secondary findings TODO: define the
    enumerations + other. Currently from model catalogue
    EndocrineTumours  colorectal  BreastOvarian  HDOrStroke Arrays of
    strings describing discrete family history phenotypes
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"OtherFamilyHistory", "fields": [{"type": ["null", {"items": "string",
"type": "array"}], "name": "maternalFamilyHistory"}, {"type": ["null",
{"items": "string", "type": "array"}], "name":
"paternalFamilyHistory"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "maternalFamilyHistory",
        "paternalFamilyHistory",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'maternalFamilyHistory', 'paternalFamilyHistory'
    ]

    def __init__(self, **kwargs):
        self.maternalFamilyHistory = kwargs.get(
            'maternalFamilyHistory', None)
        self.paternalFamilyHistory = kwargs.get(
            'paternalFamilyHistory', None)


class Pedigree(ProtocolElement):
    """
    This is the concept of a family with associated phenotypes as
    present in the record RDParticipant
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"Pedigree", "fields": [{"doc": "", "type": "string", "name":
"familyId"}, {"type": {"items": {"doc": "", "type": "record", "name":
"RDParticipant", "fields": [{"type": "string", "name": "id"}, {"type":
["null", "int", "string"], "name": "FamilyId"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "externalIds"}, {"doc":
"", "type": "string", "name": "dataModelCatalogueVersion"}, {"doc":
"", "type": {"symbols": ["male", "female", "unknown"], "type": "enum",
"name": "Sex"}, "name": "sex"}, {"doc": "", "type": "string", "name":
"father"}, {"type": "string", "name": "mother"}, {"doc": "", "type":
["null", {"items": {"doc": "", "type": "record", "name": "Disorder",
"fields": [{"doc": "", "type": ["null", "string"], "name":
"diseaseGroup"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubGroup"}, {"doc": "", "type": ["null", "string"], "name":
"specificDisease"}, {"doc": "", "type": ["null", "int"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"type":
["null", {"items": {"doc": "", "type": "record", "name": "HpoTerm",
"fields": [{"doc": "", "type": "string", "name": "term"}, {"doc": "",
"type": ["null", "boolean"], "name": "termPresence"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name":
"modifier"}, {"doc": "", "type": ["null", "int"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc":
"", "type": ["null", {"symbols": ["unaffected", "affected", "carrier",
"uncertain", "presymptomatic"], "doc": "", "type": "enum", "name":
"CarrierStatus"}], "name": "carrierStatus"}, {"doc": "", "type":
["null", {"symbols": ["aborted", "deceased", "unborn", "stillborn",
"miscarriage"], "type": "enum", "name": "LifeStatus"}], "name":
"lifeStatus"}, {"doc": "", "type": ["null", "int"], "name":
"twinGroup"}, {"doc": "", "type": ["null", "boolean"], "name":
"monozygotic"}, {"type": ["null", {"symbols": ["not_adopted",
"adoptedin", "adoptedout"], "doc": "", "type": "enum", "name":
"AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", "boolean"], "name": "consanguineousParents"}, {"doc": "",
"type": {"fields": [{"default": false, "doc": "", "type": "boolean",
"name": "programmeConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "primaryFindingConsent"}, {"default": false, "doc":
"", "type": "boolean", "name": "secondaryFindingConsent"}, {"default":
false, "doc": "", "type": "boolean", "name": "carrierStatusConsent"}],
"type": "record", "name": "ConsentStatus"}, "name": "consentStatus"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "additionalInformation"}]}, "type": "array"}, "name":
"participants"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "familyId",
        "participants",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'participants': RDParticipant,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'participants': RDParticipant,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'familyId', 'participants'
    ]

    def __init__(self, **kwargs):
        self.familyId = kwargs.get(
            'familyId', None)
        self.participants = kwargs.get(
            'participants', None)


class Penetrance(object):
    """
    Penetrance assumed in the analysis
    """
    complete = "complete"
    incomplete = "incomplete"


class Phase(object):
    """
    TODO: check in remission....
    """
    primary = "primary"
    metastasis = "metastasis"


class PreservationMethod(object):
    """
    MP: adding unknown - or we can just allow null? AR: Null should be
    no Treatment, if there is always a treatment we should not allow
    nulls
    """
    FFPE = "FFPE"
    FF = "FF"
    unknown = "unknown"
    LEUK = "LEUK"
    GL = "GL"


class RDParticipant(ProtocolElement):
    """
    This defines a RD Participant (demographics and pedigree
    information)
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"RDParticipant", "fields": [{"type": "string", "name": "id"}, {"type":
["null", "int", "string"], "name": "FamilyId"}, {"type": ["null",
{"items": "string", "type": "array"}], "name": "externalIds"}, {"doc":
"", "type": "string", "name": "dataModelCatalogueVersion"}, {"doc":
"", "type": {"symbols": ["male", "female", "unknown"], "type": "enum",
"name": "Sex"}, "name": "sex"}, {"doc": "", "type": "string", "name":
"father"}, {"type": "string", "name": "mother"}, {"doc": "", "type":
["null", {"items": {"doc": "", "type": "record", "name": "Disorder",
"fields": [{"doc": "", "type": ["null", "string"], "name":
"diseaseGroup"}, {"doc": "", "type": ["null", "string"], "name":
"diseaseSubGroup"}, {"doc": "", "type": ["null", "string"], "name":
"specificDisease"}, {"doc": "", "type": ["null", "int"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "disorderList"}, {"type":
["null", {"items": {"doc": "", "type": "record", "name": "HpoTerm",
"fields": [{"doc": "", "type": "string", "name": "term"}, {"doc": "",
"type": ["null", "boolean"], "name": "termPresence"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name":
"modifier"}, {"doc": "", "type": ["null", "int"], "name":
"ageOfOnset"}]}, "type": "array"}], "name": "hpoTermList"}, {"doc":
"", "type": ["null", {"symbols": ["unaffected", "affected", "carrier",
"uncertain", "presymptomatic"], "doc": "", "type": "enum", "name":
"CarrierStatus"}], "name": "carrierStatus"}, {"doc": "", "type":
["null", {"symbols": ["aborted", "deceased", "unborn", "stillborn",
"miscarriage"], "type": "enum", "name": "LifeStatus"}], "name":
"lifeStatus"}, {"doc": "", "type": ["null", "int"], "name":
"twinGroup"}, {"doc": "", "type": ["null", "boolean"], "name":
"monozygotic"}, {"type": ["null", {"symbols": ["not_adopted",
"adoptedin", "adoptedout"], "doc": "", "type": "enum", "name":
"AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "", "type":
["null", "boolean"], "name": "consanguineousParents"}, {"doc": "",
"type": {"fields": [{"default": false, "doc": "", "type": "boolean",
"name": "programmeConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "primaryFindingConsent"}, {"default": false, "doc":
"", "type": "boolean", "name": "secondaryFindingConsent"}, {"default":
false, "doc": "", "type": "boolean", "name": "carrierStatusConsent"}],
"type": "record", "name": "ConsentStatus"}, "name": "consentStatus"},
{"doc": "", "type": ["null", {"values": "string", "type": "map"}],
"name": "additionalInformation"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "FamilyId",
        "additionalInformation",
        "adoptedStatus",
        "carrierStatus",
        "consanguineousParents",
        "consentStatus",
        "dataModelCatalogueVersion",
        "disorderList",
        "externalIds",
        "father",
        "hpoTermList",
        "id",
        "lifeStatus",
        "monozygotic",
        "mother",
        "sex",
        "twinGroup",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'consentStatus': ConsentStatus,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'FamilyId', 'additionalInformation', 'adoptedStatus',
        'carrierStatus', 'consanguineousParents', 'consentStatus',
        'dataModelCatalogueVersion', 'disorderList', 'externalIds',
        'father', 'hpoTermList', 'id', 'lifeStatus', 'monozygotic',
        'mother', 'sex', 'twinGroup'
    ]

    def __init__(self, **kwargs):
        self.FamilyId = kwargs.get(
            'FamilyId', None)
        self.additionalInformation = kwargs.get(
            'additionalInformation', None)
        self.adoptedStatus = kwargs.get(
            'adoptedStatus', None)
        self.carrierStatus = kwargs.get(
            'carrierStatus', None)
        self.consanguineousParents = kwargs.get(
            'consanguineousParents', None)
        self.consentStatus = kwargs.get(
            'consentStatus', None)
        self.dataModelCatalogueVersion = kwargs.get(
            'dataModelCatalogueVersion', None)
        self.disorderList = kwargs.get(
            'disorderList', None)
        self.externalIds = kwargs.get(
            'externalIds', None)
        self.father = kwargs.get(
            'father', None)
        self.hpoTermList = kwargs.get(
            'hpoTermList', None)
        self.id = kwargs.get(
            'id', None)
        self.lifeStatus = kwargs.get(
            'lifeStatus', None)
        self.monozygotic = kwargs.get(
            'monozygotic', None)
        self.mother = kwargs.get(
            'mother', None)
        self.sex = kwargs.get(
            'sex', None)
        self.twinGroup = kwargs.get(
            'twinGroup', None)


class RareDisease(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"RareDisease", "fields": [{"doc": "", "type": "string", "name":
"enrolledAgainstSpecificDiseaseTitle"}, {"doc": "", "type": "string",
"name": "dataModelCatalogueVersion"}, {"type": {"doc": "", "type":
"record", "name": "Pedigree", "fields": [{"doc": "", "type": "string",
"name": "familyId"}, {"type": {"items": {"doc": "", "type": "record",
"name": "RDParticipant", "fields": [{"type": "string", "name": "id"},
{"type": ["null", "int", "string"], "name": "FamilyId"}, {"type":
["null", {"items": "string", "type": "array"}], "name":
"externalIds"}, {"doc": "", "type": "string", "name":
"dataModelCatalogueVersion"}, {"doc": "", "type": {"symbols": ["male",
"female", "unknown"], "type": "enum", "name": "Sex"}, "name": "sex"},
{"doc": "", "type": "string", "name": "father"}, {"type": "string",
"name": "mother"}, {"doc": "", "type": ["null", {"items": {"doc": "",
"type": "record", "name": "Disorder", "fields": [{"doc": "", "type":
["null", "string"], "name": "diseaseGroup"}, {"doc": "", "type":
["null", "string"], "name": "diseaseSubGroup"}, {"doc": "", "type":
["null", "string"], "name": "specificDisease"}, {"doc": "", "type":
["null", "int"], "name": "ageOfOnset"}]}, "type": "array"}], "name":
"disorderList"}, {"type": ["null", {"items": {"doc": "", "type":
"record", "name": "HpoTerm", "fields": [{"doc": "", "type": "string",
"name": "term"}, {"doc": "", "type": ["null", "boolean"], "name":
"termPresence"}, {"doc": "", "type": ["null", {"items": "string",
"type": "array"}], "name": "modifier"}, {"doc": "", "type": ["null",
"int"], "name": "ageOfOnset"}]}, "type": "array"}], "name":
"hpoTermList"}, {"doc": "", "type": ["null", {"symbols":
["unaffected", "affected", "carrier", "uncertain", "presymptomatic"],
"doc": "", "type": "enum", "name": "CarrierStatus"}], "name":
"carrierStatus"}, {"doc": "", "type": ["null", {"symbols": ["aborted",
"deceased", "unborn", "stillborn", "miscarriage"], "type": "enum",
"name": "LifeStatus"}], "name": "lifeStatus"}, {"doc": "", "type":
["null", "int"], "name": "twinGroup"}, {"doc": "", "type": ["null",
"boolean"], "name": "monozygotic"}, {"type": ["null", {"symbols":
["not_adopted", "adoptedin", "adoptedout"], "doc": "", "type": "enum",
"name": "AdoptedStatus"}], "name": "adoptedStatus"}, {"doc": "",
"type": ["null", "boolean"], "name": "consanguineousParents"}, {"doc":
"", "type": {"fields": [{"default": false, "doc": "", "type":
"boolean", "name": "programmeConsent"}, {"default": false, "doc": "",
"type": "boolean", "name": "primaryFindingConsent"}, {"default":
false, "doc": "", "type": "boolean", "name":
"secondaryFindingConsent"}, {"default": false, "doc": "", "type":
"boolean", "name": "carrierStatusConsent"}], "type": "record", "name":
"ConsentStatus"}, "name": "consentStatus"}, {"doc": "", "type":
["null", {"values": "string", "type": "map"}], "name":
"additionalInformation"}]}, "type": "array"}, "name":
"participants"}]}, "name": "pedigree"}, {"doc": "", "type": ["null",
{"doc": "", "type": "record", "name": "File", "fields": [{"doc": "",
"type": ["null", "string", {"items": "string", "type": "array"}],
"name": "SampleId"}, {"doc": "", "type": "string", "name":
"URIFile"}]}], "name": "inbreedingCoefficientEstimates"}, {"doc": "",
"type": ["null", {"items": "string", "type": "array"}], "name":
"ancestries"}, {"doc": "", "type": ["null", "string"], "name":
"complexGeneticPhenomena"}, {"doc": "", "type": {"items": "string",
"type": "array"}, "name": "modeOfInheritance"}, {"doc": "", "type":
["null", {"doc": "", "type": "record", "name": "VirtualPanel",
"fields": [{"type": "string", "name": "SpecificDiseaseTitle"}, {"doc":
"", "type": ["null", {"items": "string", "type": "array"}], "name":
"geneIds"}, {"doc": "", "type": ["null", {"items": "string", "type":
"array"}], "name": "clinicalRelevantTranscripts"}, {"doc": "", "type":
["null", "File"], "name": "RelevantRegions"}, {"doc": "", "type":
["null", "File"], "name": "clinicalRelevantVariants"}]}], "name":
"virtualPanel"}, {"doc": "", "type": ["null", {"doc": "", "type":
"record", "name": "OtherFamilyHistory", "fields": [{"type": ["null",
{"items": "string", "type": "array"}], "name":
"maternalFamilyHistory"}, {"type": ["null", {"items": "string",
"type": "array"}], "name": "paternalFamilyHistory"}]}], "name":
"otherFamilyHistory"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "ancestries",
        "complexGeneticPhenomena",
        "dataModelCatalogueVersion",
        "enrolledAgainstSpecificDiseaseTitle",
        "inbreedingCoefficientEstimates",
        "modeOfInheritance",
        "otherFamilyHistory",
        "pedigree",
        "virtualPanel",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'inbreedingCoefficientEstimates': File,
            'otherFamilyHistory': OtherFamilyHistory,
            'pedigree': Pedigree,
            'virtualPanel': VirtualPanel,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'inbreedingCoefficientEstimates': File,
            'otherFamilyHistory': OtherFamilyHistory,
            'pedigree': Pedigree,
            'virtualPanel': VirtualPanel,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'ancestries', 'complexGeneticPhenomena',
        'dataModelCatalogueVersion',
        'enrolledAgainstSpecificDiseaseTitle',
        'inbreedingCoefficientEstimates', 'modeOfInheritance',
        'otherFamilyHistory', 'pedigree', 'virtualPanel'
    ]

    def __init__(self, **kwargs):
        self.ancestries = kwargs.get(
            'ancestries', None)
        self.complexGeneticPhenomena = kwargs.get(
            'complexGeneticPhenomena', None)
        self.dataModelCatalogueVersion = kwargs.get(
            'dataModelCatalogueVersion', None)
        self.enrolledAgainstSpecificDiseaseTitle = kwargs.get(
            'enrolledAgainstSpecificDiseaseTitle', None)
        self.inbreedingCoefficientEstimates = kwargs.get(
            'inbreedingCoefficientEstimates', None)
        self.modeOfInheritance = kwargs.get(
            'modeOfInheritance', None)
        self.otherFamilyHistory = kwargs.get(
            'otherFamilyHistory', None)
        self.pedigree = kwargs.get(
            'pedigree', None)
        self.virtualPanel = kwargs.get(
            'virtualPanel', None)


class ReportEvent(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"ReportEvent", "fields": [{"doc": "", "type": "string", "name":
"modeOfInheritance"}, {"doc": "", "type": {"symbols": ["complete",
"incomplete"], "doc": "", "type": "enum", "name": "Penetrance"},
"name": "penetrance"}, {"doc": "", "type": "float", "name": "score"},
{"doc": "", "type": "boolean", "name": "fullyExplainsPhenotype"},
{"doc": "", "type": ["null", "int"], "name": "groupOfVariants"},
{"doc": "", "type": "string", "name": "variantJustification"},
{"type": ["null", {"symbols": ["NONE", "TIER1", "TIER2", "TIER3"],
"doc": "", "type": "enum", "name": "Tier"}], "name": "tier"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "fullyExplainsPhenotype",
        "groupOfVariants",
        "modeOfInheritance",
        "penetrance",
        "score",
        "tier",
        "variantJustification",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {}
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {}

        return embeddedTypes[fieldName]

    __slots__ = [
        'fullyExplainsPhenotype', 'groupOfVariants',
        'modeOfInheritance', 'penetrance', 'score', 'tier',
        'variantJustification'
    ]

    def __init__(self, **kwargs):
        self.fullyExplainsPhenotype = kwargs.get(
            'fullyExplainsPhenotype', None)
        self.groupOfVariants = kwargs.get(
            'groupOfVariants', None)
        self.modeOfInheritance = kwargs.get(
            'modeOfInheritance', None)
        self.penetrance = kwargs.get(
            'penetrance', None)
        self.score = kwargs.get(
            'score', None)
        self.tier = kwargs.get(
            'tier', None)
        self.variantJustification = kwargs.get(
            'variantJustification', None)


class ReportedStructuralVariant(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"ReportedStructuralVariant", "fields": [{"doc": "", "type": "string",
"name": "chromosome"}, {"doc": "", "type": "int", "name": "start"},
{"doc": "", "type": "int", "name": "end"}, {"doc": "", "type":
"string", "name": "type"}, {"doc": "", "type": "string", "name":
"alternate"}, {"type": ["null", {"items": {"doc": "", "type":
"record", "name": "CalledGenotype", "fields": [{"doc": "", "type":
"string", "name": "participantId"}, {"doc": "", "type": "string",
"name": "genotype"}, {"doc": "", "type": ["null", "int"], "name":
"copyNumber"}]}, "type": "array"}], "name": "familyGenotypes"},
{"doc": "", "type": {"items": {"fields": [{"doc": "", "type":
"string", "name": "modeOfInheritance"}, {"doc": "", "type":
{"symbols": ["complete", "incomplete"], "doc": "", "type": "enum",
"name": "Penetrance"}, "name": "penetrance"}, {"doc": "", "type":
"float", "name": "score"}, {"doc": "", "type": "boolean", "name":
"fullyExplainsPhenotype"}, {"doc": "", "type": ["null", "int"],
"name": "groupOfVariants"}, {"doc": "", "type": "string", "name":
"variantJustification"}, {"type": ["null", {"symbols": ["NONE",
"TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum", "name":
"Tier"}], "name": "tier"}], "type": "record", "name": "ReportEvent"},
"type": "array"}, "name": "ReportEvents"}, {"doc": "", "type":
["null", "float"], "name": "internalScore"}, {"type": ["null",
{"symbols": ["BENIGN", "LIKELY_BENIGN", "VUS", "LIKELY_PATHOGENIC",
"PATHOGENIC"], "doc": "", "type": "enum", "name":
"VariantClassification"}], "name": "variantClassification"}, {"doc":
"", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "ReportEvents",
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alternate",
        "chromosome",
        "comments",
        "end",
        "familyGenotypes",
        "internalScore",
        "start",
        "type",
        "variantClassification",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ReportEvents': ReportEvent,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ReportEvents': ReportEvent,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'ReportEvents', 'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alternate',
        'chromosome', 'comments', 'end', 'familyGenotypes',
        'internalScore', 'start', 'type', 'variantClassification'
    ]

    def __init__(self, **kwargs):
        self.ReportEvents = kwargs.get(
            'ReportEvents', None)
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.comments = kwargs.get(
            'comments', None)
        self.end = kwargs.get(
            'end', None)
        self.familyGenotypes = kwargs.get(
            'familyGenotypes', None)
        self.internalScore = kwargs.get(
            'internalScore', None)
        self.start = kwargs.get(
            'start', None)
        self.type = kwargs.get(
            'type', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)


class ReportedVariant(ProtocolElement):
    """
    No documentation
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"ReportedVariant", "fields": [{"doc": "", "type": "string", "name":
"chromosome"}, {"doc": "", "type": "int", "name": "position"}, {"doc":
"", "type": "string", "name": "reference"}, {"doc": "", "type":
"string", "name": "alternate"}, {"doc": "", "type": ["null", {"items":
{"doc": "", "type": "record", "name": "CalledGenotype", "fields":
[{"doc": "", "type": "string", "name": "participantId"}, {"doc": "",
"type": "string", "name": "genotype"}, {"doc": "", "type": ["null",
"int"], "name": "copyNumber"}]}, "type": "array"}], "name":
"familyGenotypes"}, {"doc": "", "type": {"items": {"fields": [{"doc":
"", "type": "string", "name": "modeOfInheritance"}, {"doc": "",
"type": {"symbols": ["complete", "incomplete"], "doc": "", "type":
"enum", "name": "Penetrance"}, "name": "penetrance"}, {"doc": "",
"type": "float", "name": "score"}, {"doc": "", "type": "boolean",
"name": "fullyExplainsPhenotype"}, {"doc": "", "type": ["null",
"int"], "name": "groupOfVariants"}, {"doc": "", "type": "string",
"name": "variantJustification"}, {"type": ["null", {"symbols":
["NONE", "TIER1", "TIER2", "TIER3"], "doc": "", "type": "enum",
"name": "Tier"}], "name": "tier"}], "type": "record", "name":
"ReportEvent"}, "type": "array"}, "name": "ReportEvents"}, {"doc": "",
"type": ["null", "float"], "name": "internalScore"}, {"type": ["null",
{"symbols": ["BENIGN", "LIKELY_BENIGN", "VUS", "LIKELY_PATHOGENIC",
"PATHOGENIC"], "doc": "", "type": "enum", "name":
"VariantClassification"}], "name": "variantClassification"}, {"doc":
"", "type": ["null", {"values": "string", "type": "map"}], "name":
"additionalTextualVariantAnnotations"}, {"doc": "", "type": ["null",
{"values": "float", "type": "map"}], "name":
"additionalNumericVariantAnnotations"}, {"doc": "", "type": ["null",
{"items": "string", "type": "array"}], "name": "comments"}]}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "ReportEvents",
        "additionalNumericVariantAnnotations",
        "additionalTextualVariantAnnotations",
        "alternate",
        "chromosome",
        "comments",
        "familyGenotypes",
        "internalScore",
        "position",
        "reference",
        "variantClassification",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ReportEvents': ReportEvent,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'ReportEvents': ReportEvent,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'ReportEvents', 'additionalNumericVariantAnnotations',
        'additionalTextualVariantAnnotations', 'alternate',
        'chromosome', 'comments', 'familyGenotypes', 'internalScore',
        'position', 'reference', 'variantClassification'
    ]

    def __init__(self, **kwargs):
        self.ReportEvents = kwargs.get(
            'ReportEvents', None)
        self.additionalNumericVariantAnnotations = kwargs.get(
            'additionalNumericVariantAnnotations', None)
        self.additionalTextualVariantAnnotations = kwargs.get(
            'additionalTextualVariantAnnotations', None)
        self.alternate = kwargs.get(
            'alternate', None)
        self.chromosome = kwargs.get(
            'chromosome', None)
        self.comments = kwargs.get(
            'comments', None)
        self.familyGenotypes = kwargs.get(
            'familyGenotypes', None)
        self.internalScore = kwargs.get(
            'internalScore', None)
        self.position = kwargs.get(
            'position', None)
        self.reference = kwargs.get(
            'reference', None)
        self.variantClassification = kwargs.get(
            'variantClassification', None)


class SampleType(object):
    """
    No documentation
    """
    germline = "germline"
    tumor = "tumor"


class Sex(object):
    """
    No documentation
    """
    male = "male"
    female = "female"
    unknown = "unknown"


class Tier(object):
    """
    Possible tiers as defined by Genomics England
    """
    NONE = "NONE"
    TIER1 = "TIER1"
    TIER2 = "TIER2"
    TIER3 = "TIER3"


class VariantClassification(object):
    """
    This is the classification of the variant according to standard
    practice guidelines (e.g. ACMG)
    """
    BENIGN = "BENIGN"
    LIKELY_BENIGN = "LIKELY_BENIGN"
    VUS = "VUS"
    LIKELY_PATHOGENIC = "LIKELY_PATHOGENIC"
    PATHOGENIC = "PATHOGENIC"


class VirtualPanel(ProtocolElement):
    """
    This record defines a gene panel. The Level 4 Title is the name of
    the condition, for example Brugada syndrome
    """
    _schemaSource = """
{"namespace": "Gel_BioInf_Models_0.1", "type": "record", "name":
"VirtualPanel", "fields": [{"type": "string", "name":
"SpecificDiseaseTitle"}, {"doc": "", "type": ["null", {"items":
"string", "type": "array"}], "name": "geneIds"}, {"doc": "", "type":
["null", {"items": "string", "type": "array"}], "name":
"clinicalRelevantTranscripts"}, {"doc": "", "type": ["null", {"doc":
"", "type": "record", "name": "File", "fields": [{"doc": "", "type":
["null", "string", {"items": "string", "type": "array"}], "name":
"SampleId"}, {"doc": "", "type": "string", "name": "URIFile"}]}],
"name": "RelevantRegions"}, {"doc": "", "type": ["null", "File"],
"name": "clinicalRelevantVariants"}], "doc": ""}
"""
    schema = avro.schema.parse(_schemaSource)
    requiredFields = {
        "RelevantRegions",
        "SpecificDiseaseTitle",
        "clinicalRelevantTranscripts",
        "clinicalRelevantVariants",
        "geneIds",
    }

    @classmethod
    def isEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'RelevantRegions': File,
            'clinicalRelevantVariants': File,
        }
        return fieldName in embeddedTypes

    @classmethod
    def getEmbeddedType(cls, fieldName):
        embeddedTypes = {
            'RelevantRegions': File,
            'clinicalRelevantVariants': File,
        }

        return embeddedTypes[fieldName]

    __slots__ = [
        'RelevantRegions', 'SpecificDiseaseTitle',
        'clinicalRelevantTranscripts', 'clinicalRelevantVariants',
        'geneIds'
    ]

    def __init__(self, **kwargs):
        self.RelevantRegions = kwargs.get(
            'RelevantRegions', None)
        self.SpecificDiseaseTitle = kwargs.get(
            'SpecificDiseaseTitle', None)
        self.clinicalRelevantTranscripts = kwargs.get(
            'clinicalRelevantTranscripts', None)
        self.clinicalRelevantVariants = kwargs.get(
            'clinicalRelevantVariants', None)
        self.geneIds = kwargs.get(
            'geneIds', None)
